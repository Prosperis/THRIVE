/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as InterviewsRouteImport } from './routes/interviews'
import { Route as DocumentsRouteImport } from './routes/documents'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as ApplicationsRouteImport } from './routes/applications'
import { Route as AnalyticsRouteImport } from './routes/analytics'
import { Route as SplatRouteImport } from './routes/$'
import { Route as IndexRouteImport } from './routes/index'

const InterviewsRoute = InterviewsRouteImport.update({
  id: '/interviews',
  path: '/interviews',
  getParentRoute: () => rootRouteImport,
} as any)
const DocumentsRoute = DocumentsRouteImport.update({
  id: '/documents',
  path: '/documents',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const ApplicationsRoute = ApplicationsRouteImport.update({
  id: '/applications',
  path: '/applications',
  getParentRoute: () => rootRouteImport,
} as any)
const AnalyticsRoute = AnalyticsRouteImport.update({
  id: '/analytics',
  path: '/analytics',
  getParentRoute: () => rootRouteImport,
} as any)
const SplatRoute = SplatRouteImport.update({
  id: '/$',
  path: '/$',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/analytics': typeof AnalyticsRoute
  '/applications': typeof ApplicationsRoute
  '/dashboard': typeof DashboardRoute
  '/documents': typeof DocumentsRoute
  '/interviews': typeof InterviewsRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/analytics': typeof AnalyticsRoute
  '/applications': typeof ApplicationsRoute
  '/dashboard': typeof DashboardRoute
  '/documents': typeof DocumentsRoute
  '/interviews': typeof InterviewsRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/$': typeof SplatRoute
  '/analytics': typeof AnalyticsRoute
  '/applications': typeof ApplicationsRoute
  '/dashboard': typeof DashboardRoute
  '/documents': typeof DocumentsRoute
  '/interviews': typeof InterviewsRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/$'
    | '/analytics'
    | '/applications'
    | '/dashboard'
    | '/documents'
    | '/interviews'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/$'
    | '/analytics'
    | '/applications'
    | '/dashboard'
    | '/documents'
    | '/interviews'
  id:
    | '__root__'
    | '/'
    | '/$'
    | '/analytics'
    | '/applications'
    | '/dashboard'
    | '/documents'
    | '/interviews'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  SplatRoute: typeof SplatRoute
  AnalyticsRoute: typeof AnalyticsRoute
  ApplicationsRoute: typeof ApplicationsRoute
  DashboardRoute: typeof DashboardRoute
  DocumentsRoute: typeof DocumentsRoute
  InterviewsRoute: typeof InterviewsRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/interviews': {
      id: '/interviews'
      path: '/interviews'
      fullPath: '/interviews'
      preLoaderRoute: typeof InterviewsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/documents': {
      id: '/documents'
      path: '/documents'
      fullPath: '/documents'
      preLoaderRoute: typeof DocumentsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/applications': {
      id: '/applications'
      path: '/applications'
      fullPath: '/applications'
      preLoaderRoute: typeof ApplicationsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/analytics': {
      id: '/analytics'
      path: '/analytics'
      fullPath: '/analytics'
      preLoaderRoute: typeof AnalyticsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/$': {
      id: '/$'
      path: '/$'
      fullPath: '/$'
      preLoaderRoute: typeof SplatRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  SplatRoute: SplatRoute,
  AnalyticsRoute: AnalyticsRoute,
  ApplicationsRoute: ApplicationsRoute,
  DashboardRoute: DashboardRoute,
  DocumentsRoute: DocumentsRoute,
  InterviewsRoute: InterviewsRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
